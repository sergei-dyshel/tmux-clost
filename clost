#!/usr/bin/env python

import sys
import argparse
import os.path
import fcntl
import os

from lib.environment import env
from lib.config import config
from lib import log, tmux, command, context, common


def acquire_lock():
    fd = os.open(env.vars['work_dir'], os.O_RDONLY)
    fcntl.flock(fd, fcntl.LOCK_EX)


def handle_cmd(cmd_args):
    with common.handle_exceptions():
        config.read()
        ctx = None
        if cmd_args.cmd_class.requires_context:
            ctx = context.get_current()
            if ctx is None:
                if not cmd_args.cmd_class.silent_no_context:
                    raise common.ClostError('Could not detect context')
        cmd = cmd_args.cmd_class()
        cmd.init(ctx, vars(cmd_args))
        if ctx:
            cmd.strip_suggestion()
        cmd.run()
    log.info('Finished')


def main_args(parser):
    env.add_args(parser)
    parser.add_argument('-d', '--debug', action='store_true')


def parse_cmd_args():
    parser = argparse.ArgumentParser()

    env.add_args(parser)
    parser.add_argument('-d', '--debug', action='store_true')
    # TODO: reenable
    subparsers = parser.add_subparsers()
    command.populate_subparsers(subparsers)

    return parser.parse_args()


def main():
    cmd_args = parse_cmd_args()

    env.init(cmd_args)

    acquire_lock()

    if sys.stdin.isatty() or cmd_args.debug:
        log_file = None
    else:
        log_file = os.path.join(env.vars['work_dir'], 'all.log')
    log.configure(log_file)

    log.info('Running with arguments {}', sys.argv[1:])
    env.dump()

    handle_cmd(cmd_args)

if __name__ == '__main__':
    main()
